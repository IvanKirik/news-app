/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/api/articles": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["ArticlesController_getArticles"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/articles/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["ArticlesController_getArticle"];
        readonly put?: never;
        readonly post?: never;
        readonly delete: operations["ArticlesController_deleteArticle"];
        readonly options?: never;
        readonly head?: never;
        readonly patch: operations["ArticlesController_updateArticle"];
        readonly trace?: never;
    };
    readonly "/api/articles/create": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["ArticlesController_createArticle"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/tags": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["TagsController_getTags"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/tags/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["TagsController_getTag"];
        readonly put?: never;
        readonly post?: never;
        readonly delete: operations["TagsController_deleteTag"];
        readonly options?: never;
        readonly head?: never;
        readonly patch: operations["TagsController_updateTag"];
        readonly trace?: never;
    };
    readonly "/api/tags/create": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["TagsController_createTag"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/emails": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["EmailsController_getAll"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/emails/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["EmailsController_getById"];
        readonly put?: never;
        readonly post?: never;
        readonly delete: operations["EmailsController_delete"];
        readonly options?: never;
        readonly head?: never;
        readonly patch: operations["EmailsController_update"];
        readonly trace?: never;
    };
    readonly "/api/emails/create": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["EmailsController_create"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/files/upload": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["FilesController_uploadFile"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/auth/register": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["AuthController_register"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/auth/login": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["AuthController_login"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/api/auth/refresh": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["AuthController_refresh"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly Tag: {
            readonly id: number;
            readonly name: string;
        };
        readonly Email: {
            readonly id: number;
            readonly email: string;
        };
        readonly Article: {
            readonly id: number;
            readonly title: string;
            readonly author: string;
            readonly description: string;
            readonly image: string;
            readonly emailIsAuthor: string;
            readonly nameIsAuthor: string;
            readonly tags: readonly components["schemas"]["Tag"][];
            readonly emailsToSend: readonly components["schemas"]["Email"][];
            /** Format: date-time */
            readonly createdAt: string;
            /** Format: date-time */
            readonly updatedAt: string;
        };
        readonly ResponseArticlesDto: {
            readonly data: readonly components["schemas"]["Article"][];
            readonly page: number;
            readonly pageSize: number;
            readonly total: number;
            readonly totalPages: number;
        };
        readonly CreateTagDto: {
            readonly id?: number;
            readonly name: string;
        };
        readonly CreateEmailDto: {
            readonly id?: number;
            readonly email: string;
        };
        readonly CreateArticleDto: {
            readonly title: string;
            readonly description: string;
            readonly image?: string;
            readonly tags?: readonly components["schemas"]["CreateTagDto"][];
            readonly emails?: readonly components["schemas"]["CreateEmailDto"][];
            readonly emailIsAuthor: string;
            readonly nameIsAuthor: string;
        };
        readonly FileElementResponse: {
            readonly url: string;
            readonly name: string;
        };
        readonly AuthDto: {
            readonly email: string;
            readonly password: string;
        };
        readonly TokensResponseDto: {
            readonly access_token: string;
            readonly refresh_token: string;
        };
        readonly RefreshDto: {
            readonly refreshToken: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaTag = components['schemas']['Tag'];
export type SchemaEmail = components['schemas']['Email'];
export type SchemaArticle = components['schemas']['Article'];
export type SchemaResponseArticlesDto = components['schemas']['ResponseArticlesDto'];
export type SchemaCreateTagDto = components['schemas']['CreateTagDto'];
export type SchemaCreateEmailDto = components['schemas']['CreateEmailDto'];
export type SchemaCreateArticleDto = components['schemas']['CreateArticleDto'];
export type SchemaFileElementResponse = components['schemas']['FileElementResponse'];
export type SchemaAuthDto = components['schemas']['AuthDto'];
export type SchemaTokensResponseDto = components['schemas']['TokensResponseDto'];
export type SchemaRefreshDto = components['schemas']['RefreshDto'];
export type $defs = Record<string, never>;
export interface operations {
    readonly ArticlesController_getArticles: {
        readonly parameters: {
            readonly query?: {
                readonly search?: string;
                readonly page?: number;
                readonly limit?: number;
                /** @description Array of tag IDs. Example queryParams - tags=1,2,44 */
                readonly tags?: string;
                /** @description Array of email IDs. Example queryParams - emails=1,2,44 */
                readonly emails?: string;
                readonly sortField?: string;
                readonly sortOrder?: string;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Get a articles */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResponseArticlesDto"];
                };
            };
        };
    };
    readonly ArticlesController_getArticle: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the article to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Get a article */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Article"];
                };
            };
        };
    };
    readonly ArticlesController_deleteArticle: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the article to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly ArticlesController_updateArticle: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the article to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateArticleDto"];
            };
        };
        readonly responses: {
            /** @description Update a article */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Article"];
                };
            };
        };
    };
    readonly ArticlesController_createArticle: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateArticleDto"];
            };
        };
        readonly responses: {
            /** @description Create a article */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Article"];
                };
            };
        };
    };
    readonly TagsController_getTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Get all tags */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Tag"][];
                };
            };
        };
    };
    readonly TagsController_getTag: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the tag to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Get tag by id */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    readonly TagsController_deleteTag: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the tag to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Delete tag */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly TagsController_updateTag: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the tag to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateTagDto"];
            };
        };
        readonly responses: {
            /** @description Update tag */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    readonly TagsController_createTag: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateTagDto"];
            };
        };
        readonly responses: {
            /** @description Create tag */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    readonly EmailsController_getAll: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Get all emails */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["Email"][];
                };
            };
        };
    };
    readonly EmailsController_getById: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the email to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Get email by id */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Email"];
                };
            };
        };
    };
    readonly EmailsController_delete: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the email to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Delete email */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly EmailsController_update: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description ID of the email to retrieve */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateEmailDto"];
            };
        };
        readonly responses: {
            /** @description Update email */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    readonly EmailsController_create: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateEmailDto"];
            };
        };
        readonly responses: {
            /** @description Create email */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Email"];
                };
            };
        };
    };
    readonly FilesController_uploadFile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly files: string;
                };
            };
        };
        readonly responses: {
            /** @description Create a file */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["FileElementResponse"][];
                };
            };
        };
    };
    readonly AuthController_register: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["AuthDto"];
            };
        };
        readonly responses: {
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly AuthController_login: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["AuthDto"];
            };
        };
        readonly responses: {
            /** @description Authenticated token successfully. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["TokensResponseDto"];
                };
            };
        };
    };
    readonly AuthController_refresh: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["RefreshDto"];
            };
        };
        readonly responses: {
            /** @description Authenticated token successfully. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["TokensResponseDto"];
                };
            };
        };
    };
}
